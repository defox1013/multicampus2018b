# 파이썬 기초 순서
'''
1. 단일 데이터 관련
        문자열
            "가나다", 'abc'
'''
print('='*100)
# 문자열 표기법
# ' ... ', " ... ", ''' ... ''', """ ... """ 
# 4 가지로 표현 가능
#       1 줄로 표현을 할 경우 : '', ""
#       여러줄 표현, 구조를 유지하는 문자열, 주석용 : ''' ''', """ """ 

a ='hi'
print(a)
a ="hi"
print(a)
a ='''hi'''
print(a)
a = """hi"""
print(a)
# 두개 표현 내부에 혼용 가능
a ='abcded"kkk"ppriow'
print(a)
a ="adfsfsf'ddddd'fsfsfsf"
print(a)

# 불가
# a ="adfsfsf"ddddd"fsfsfsf"
print(a)
# 되게 하는 법 이스케이프 문자로 활용가능
a ="adfsfsf\"ddddd\"fsfsfsf"
print(a)

a = '''
ㄴㄹㄴㄹㄴㄹㄴㄹㄴㄹ
ㄴㄹㄴㄹㄴㅇㄹㄴㄹ
ㄹㄴㄹㄴㄹㄴㅇ
ㄹㄴㄹㄴㅇㄹㄴㅇㄹ
ㄹㄴㄹㄴㄹfsf
fsfsfs
gsvsgsf
'''
print(a)

print(4+4)

#######################################################################################################################
# 문자열 더하기
print('='*100)
a = '123'
b = '567'
print(a + b)

# 문자열반복
print('='*100)

#######################################################################################################################
#   인덱싱  indexing
#       문자열에서 특정 문자를 획득하는 방식/ 값 하나를 
#       문법 : 변수[순서\정방향, 역방향 둘 다 가능\] 
#           예시 : a 라는 변수에서 1을 출력하시오
#       인덱스 계산은 정방향일 경우 0부터 따진다
#       ex ) 0번째 1번째 '''''(번째 뒤에 있는 숫자가 인덱싱됨)  
#                                                                                           중괄호{}  대괄호[]  소괄호()
print('='*100)
a = '12345567797319379'
print(a[1]) # 1 출력
print(a[9]) # 정방향 첫번째 9 출력
print(a[2]) # 정방향 첫번째 3 출력

#   역방향 인덱싱
#        -1 번째 -2 번째로 시작
print(a[-1])
print(a[-2])

#       결론 : 인덱싱은 정방향 역방향 둘중 가까운 것에서부터


#######################################################################################################################
# 슬라이싱
#       범위에 해당하는 데이터 획득
#       문법 : 변수[시작인덱스:끝인덱스]

print('='*100)
url = 'http://google.com/img/a.jpg'
a = '0123456789'
#       예시 : a의 값에서 1 ~ 8까지 출력하시오
print(a[:]) #전체가 나온다, 카피와 같다. = ctrl + c
print(a[1:-1])

# 0123 출력하시오
print(a[0:-6])
print(a[0:4])
print(a[:4])

# 파일명만 출력하시오
print(url[-5:])
#       변수 {시작인덱스 : 끝 인덱스 : 스텝(ㅂ 개씩, 혹은 N개씩 데이터 획득) }
print(url[-5:1])
print(url[-5:])

#######################################################################################################################
#   포맷팅
#        어떤 데이터를 문자열과 결합하여 특정 형태로 표현하는 방식
print('='*100)
a = 1
b = 2
#       x + y = z 라는 형태로 출력되게 문자열을 구성하시오

print('%d + %d = %d' % (a, b, a+b))
print('%d + %d = %f' % (a, b, a/b))

#출력하고자 하는 타입과 포맷팅의 표현이 일치하지 않으면 부정확하게 나오거나, 오류를 출력 할 수 있다
#무난하게 문제 없이 받으려면 %s

print('%s / %s = %s' % (a, b, a/b))

print('='*100)
#인덱스로 포맷팅을 구성하고 싶다
print('{0} / {1} = {2}' .format (a, b, a/b))  # ''.format == 문자열 함수

#인자에 이름을 부여하여 포맷팅을 구성하고 싶다
print('{0} / {1} = {result}' .format (a, b, result=(a/b) ))

#######################################################################################################################
#   문자열 지원 함수들(특정 기능하는)
a = '0123456789'
b = 'ABCDEFG'
print('문자열의 특정 문자 개수?', a.count('1') )
print('문자열의 특정 문자 개수?', a.count('-1') )

# a라는 문자열에 a라는 알파뱃 단어가 존재하는가?

print(a.count('A') == 0 )
print(b.count('A') == 0 )

#조인기능
b = ","
c = " 와 "
print(b.join(a))
print(c.join( a ))

#공백제거
a = '              dfsffsfjjfsiofjsofjslfjoi        sofjsfsfjsoifjsoifjsojf            '
print(a)
print( '[%s]' %  a )

#   왼쪽 공백제거
print( '[%s]' %  a.lstrip() )
#   오른쪽 공백제거
print( '[%s]' %  a.rstrip() )
#   양 옆 공백제거
print( '[%s]' %  a.strip() )

print('='*100)
# 대소문자 변환 -> 응용 프로그램에서 대문자만 혹은 소문자로만 판단하는 경우 주로 사용
a = 'abcdfsfdsDASFSFBSFW멀티123!@#'

print(a)
print(a.lower(), a.upper() )

#######################################################################################################################
#   포멧팅에서 자릿칸 표현
#   20칸 자리에 문자열을 배치해라
print( '[%20s]' % '12345' )
print( '[%-20s]' % '12345' )
print( '[%100s]' % '12345' )


print( '[%f]' % 3.1415926535 )
print( '[%0.2f]' % 3.1415926535 )
print( '[%0.2f]' % 3.1465926535 )
print( '[%.2f]' % 3.1465926535 )
print( '[%.2f]' % 3.1415926535 )

print( '[%10.2f]' % 3.1415926535 )
print( '[%10.2f]' % 2222222222222223.1415926535 )



#######################################################################################################################
#   나누기 <-> 조인

a = 'HELLO WORLD'

b = ','
c = b.join(a)
print(c)

# , < == 구분자
# 구분자 ,를 기준으로 c 문자열을 나누겠다

print(c.split(','))

url = 'http://google.com/img/a.jpg'
url = 'http://google.com/img/1234/a.jpg'


# / <== 구분자
print(url.count('/'))
print(url.split('/') [5] )
print(url.split('/') [url.count('/')] )



# 치환식 < == 포맷팅 + 치환식 + 자리수 : 인덱스로 포멧팅 방식

a = '123%s456'.format("k")
# a = '123{0}456'.format("k")
a = '123{0}456'.format("k")
print(a)


# 자리수 10개
a = '123{0:<10}456'.format("k")
print(a)
# k를 뒤로
a = '123{0:>10}456'.format("k")
print(a)

# k를 가운데 10자리
a = '123{0:^10}456'.format("k")
print(a)

# 가운데 채우기
a = '123{0:+^10}456'.format("k")
print(a)



